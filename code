# Set up
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# import data
gould = pd.read_csv("/Users/ruowei/Desktop/ds learning/NBER data/gouldallr.csv")

# examine data structure
gould.head()
print(gould.info())

# examine categorical variables
# Name
gould['NAME'].value_counts()   
len(gould.NAME.unique()) 
gould['NAME'].isnull().sum() 
# Rank
gould['RANK'].value_counts()
len(gould.RANK.unique())  
gould['RANK'].isnull().sum()
# American
gould['AMERICAN'].value_counts()  
gould['AMERICAN'].isnull().sum() 
# Ancestry
gould['ANCESTRY'].value_counts()  
len(gould.ANCESTRY.unique())
gould['ANCESTRY'].isnull().sum() 
# state/country of birth 
gould['BRN_STAT'].value_counts()  
len(gould.BRN_STAT.unique())
gould['BRN_STAT'].isnull().sum() 
# County of birth 
gould['BRN_CNTY'].value_counts()  
len(gould.BRN_CNTY.unique())
gould['BRN_CNTY'].isnull().sum() 
# town of birth 
gould['BRN_TOWN'].value_counts()  
len(gould.BRN_TOWN.unique())
gould['BRN_TOWN'].isnull().sum() 
#.....for all categorical variables
# Bulk check example: Education-related columns
edu_cols = [col for col in gould.columns if 'EDC' in col]
print(edu_cols)
gould[edu_cols].isnull().sum() 
# another exapmle: comments columns
comm_cols = [col for col in gould.columns if 'COM' in col]
print(comm_cols)
gould[comm_cols].isnull().sum() 

# examine numerical variables
# example: Height
gould['HEIGHT'].describe() 
gould['HEIGHT'].isnull().sum()
# ... for all numerical variables

# subset original dataset
# select interested columns
selected_columns = ['NAME','RANK','AMERICAN','ANCESTRY','BRN_STAT','BRTH_FAT','ENS_WHER','ENS_WHAT','EYE_CLR','ST_VIGOR','ATHLETIC','EXAMINER','RSTATE','MARREE','HAIRCOLR','EYEPROM','COMPLXEE','MUSCLEE','TEETHEE','EXAMPLAC','HEIGHT','HYT_NCK','HYT_PEM','BRD_NCK','BRD_PLV','CIR_WST','CIR_HIP','LGH_ARM','CAP_CHES','WEIGHT','DYNAMOME','AGE','SHOULDER'] 
gould_s = gould[selected_columns]
# save subsetted dataset
gould_s.to_csv("/Users/ruowei/Desktop/ds learning/NBER data/gould_s.csv")

# rename columns to be more readable
gould_s.rename(columns={'BRN_STAT': 'St_Ctry_Birth', 'BRTH_FAT': 'Father_birthplace', 'ENS_WHER': 'Enlist_location', 'ENS_WHAT': 'Enlist_term', 'ATHLETIC': 'Athletic_Recreation', 'RSTATE': 'Regi_state', 'MARREE': 'Marital_status', 'EYEPROM': 'Eyes_prom', 'COMPLXEE': 'Complexion', 'MUSCLEE': 'Muscle_dev', 'TEETHEE': 'Teeth_con', 'HYT_NCK': 'Height_to_neck','HYT_PEM': 'Height_to_perinaeum','BRD_NCK': 'Neck_breadth', 'BRD_PLV':'Pelvis_breadth','CIR_WST':'Waist_circumference','CIR_HIP':'Hip_circumference','LGH_ARM':'Arm_length','CAP_CHES': 'Chest_capacity','SHOULDER': 'Shoulder_width'}, inplace=True)   
# format column names:
# Capitalize all columns:
gould_s.columns = gould_s.columns.str.capitalize()
# reorder columns to be rougly in the following groups: demographics, military information, anthropometrics, vigor, appearance, health condition.
columns_order = ['Name', 'Age', 'American', 'Ancestry', 'St_ctry_birth', 'Father_birthplace', 'Marital_status', 'Rank', 'Enlist_location', 'Enlist_term', 'Regi_state', 'Examiner', 'Examplac' ,'Height', 'Weight', 'Waist_circumference', 'Hip_circumference', 'Shoulder_width', 'Arm_length','Height_to_neck','Height_to_perinaeum', 'Neck_breadth', 'Pelvis_breadth', 'Chest_capacity', 'Dynamome', 'Eye_clr', 'Haircolr', 'Complexion', 'Muscle_dev', 'St_vigor', 'Athletic_recreation', 'Eyes_prom', 'Teeth_con']
gould_formatted = gould_s.reindex(columns=columns_order)
#save formatted dataset
gould_formatted.to_csv("/Users/ruowei/Desktop/ds learning/NBER data/gould_formatted.csv")

# basic cleaning of each variable
gould_formatted = pd.read_csv("/Users/ruowei/Desktop/ds learning/NBER data/gould_formatted.csv")
# Name
gould_formatted['Name'] = gould_formatted['Name'].replace(['NO NAME GIVEN', 'NONE GIVEN', 'NOT LEGIBLE', 'NO NAME', 'NOT GIVEN'], None) 
gould_formatted['Name'] = gould_formatted['Name'].astype('str')
# Age
gould_formatted['Age'] = gould_formatted['Age'].replace('BROWN', np.nan) 
gould_formatted['Age'] = gould_formatted['Age'].astype('float64') 
# American
gould_formatted['American'] = gould_formatted['American'].replace(['T', 'F'], ['Y', 'N']) 
gould_formatted['American'] = gould_formatted['American'].astype('category') 
# Ancestry: missing too much information, drop column
gould_formatted = gould_formatted.drop("Ancestry", axis=1) 
# birth place
gould_formatted['St_ctry_birth'] = gould_formatted['St_ctry_birth'].astype('category') 
# Father birth place
gould_formatted['Father_birthplace'] = gould_formatted['Father_birthplace'].replace(['??', '?'], None) 
gould_formatted['Father_birthplace'] = gould_formatted['Father_birthplace'].astype('category') 
# Marital status
gould_formatted['Marital_status'] = gould_formatted['Marital_status'].replace('BROWN', np.nan)
gould_formatted['Marital_status'] = gould_formatted['Marital_status'].astype('category') 
# Rank
# Renaming "private": 
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['PR','PRIV', 'P', 'PRIVTE', 'RIVATE', 'PRT', 'PRIAVTE', 'PRI', 'P.', 'PRIVAATE', 'PRIVAE', 'PRVATE', 'PRIVAT', 'PR.', 'PRIATE', 'PRIVAYE', 'PRRIV', 'PPRIVATE', 'PRIVATE.', 'PRIVATTE', 'PRVIATE', 'PVT'], 'PRIVATE')
# "coporal": 
# Find all possible combinations
list = gould_formatted[gould_formatted['Rank'].str.contains("CO") == True]
cop_list = list['Rank'].unique() 
print(cop_list) 
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['CORP', 'CORPOREAL', 'FORPORAL', \
'CORPROAL', 'COPORAL', 'CORPL', '2 CORP', 'CORPOAL', 'COPR', 'PRIVATE CORP.', 'PRIVATE CORP', \
'COPL', 'CORP.', 'CORORAL', 'CORPL.', 'COPRORAL', 'PRIV./CORPORAL', '1ST COPL' '2ND CORPORAL', \
'COPER', 'PRIV CORPORAL', 'CORPPORAL', '1 CORP', 'PRIVATE CORPORA', 'COL'], 'CORPORAL')
# "sergeant":
selected_ser = gould_formatted[gould_formatted['Rank'].str.contains('SER|SAR|SG|SEAR|SEG|SRG') == True]
ser_list = selected_ser['Rank'].unique() 
print(ser_list)
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['SGT', 'SARGEANT', 'QTRMSTR SGT', '1 SERGT', 'SARGNT', \
'1 SERGEANT', '1SG', '1ST SGT', 'QURTRMSTR SGT', '1ST SARGEANT', 'SERGT', 'SGT.', 'SARGT', 'SEARGANT', \
'2 SERGT', 'SERGT.', '4 SERGT', 'SARGET', 'SERGEANT-BAND', 'SEGT', 'QMASTER SERGT', '2ND SERGT', 'SERGENT', \
'1 SEARG', 'SEREGEANT', '1ST SERGEANT', 'COM SEARGANT', 'COMMISARY SERG.', 'SRGT', 'SGNT', 'SERG', \
 '1ST SERGT', 'SERGT ORDERLY', '1ST SEARG.', 'SADDLER SGT', 'SERGEANT MAJOR', 'ORD SERGT', 'SEARGENT', \
 'ORDERLY SERGT', 'SARGEANT/MAJOR', 'COMMISSARY SERG', '3 SERGT', '1 SARGEANT', '2 DUTY SERGT', 'SARGENT', \
 '1. SERG.', 'COMMISSAR SGT.', '2SG', 'ORD. SERGT', 'SARFT', 'SERGT MAJOR', '1 SERTG', 'M SERGT', '2ND SEARG', \
 '1ST SEGT', 'SARGT MAJOR', 'SEGT 1ST', '1ST SEARG', '2 SEARG', 'PRIV./SERGEANT', 'SEARGEANT', 'MAJOR SEARGENT', \
 'Q.M. SEGT', '1ST SEARGANT', '3SERGEANT', 'ORD. SERGT.', 'COMM SERGT', 'QUARTERMAS. SER'], 'SERGEANT')
 # "captain":
selected_cap = gould_formatted[gould_formatted['Rank'].str.contains('CAPT|CPTN|CAP') == True]
cap_list = selected_cap['Rank'].unique() 
print(cap_list)
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['CAPT','CAP', 'CPTN', 'PRIVATE/CAPTAIN', 'CAPT.', 'PRIV./CAPTAIN'], 'CAPTAIN')
# "lieutenant"
selected_lt = gould_formatted[gould_formatted['Rank'].str.contains('LIEU|LT|LIE|LEI') == True]
print(selected_lt['Rank'].unique())
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['LIEUTENANT', 'LEITUNANT', 'LT.', '2ND LIETUNANT', \
'LIEUT.', 'LT', '1ST LIEUT.', '1 LIEUT', 'LIEUT', '2ND LIEUT.', '2 LIEUT', '1ST LIEUT', 'LIEUT COL', \
'2D LIEUT', '2ND LT', '2 LT', '2 LIEUTENANT', '1 LIET', '2ND LIEUT', 'LIET.', 'LIEUTNANT', 'LIEUTANANT'], 'LIEUTENANT')


# can be used to create categorical subset: import copy cat_gould = gould.select_dtypes(include = ['object']).copy()
# examine missing values from entire dataset
print(gould.isnull().values.sum())
perc_missing = 3360274/(229*20406)
perc_missing
# examine missingness by column
print(gould.isnull().sum())
# drop columns with more than 80% missingness
thresh = len(gould)*.2
gould.dropna(thresh = thresh, axis = 1, inplace = True)
# Look at Rank distributions
import seaborn as sns 
rank_dist = gould['RANK'].value_counts() 
sns.set(style="darkgrid") 
sns.barplot(rank_dist.index, rank_dist.values, alpha=0.9) 
plt.title('Frequency Distribution of Military Rank') 
plt.ylabel('Number of Occurrences', fontsize=12) 
plt.xlabel('Rank', fontsize=12) 
plt.show()  
    
    
%save -r gouldanalysis 1-99999
