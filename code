# Set up
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# import data
gould = pd.read_csv("/Users/ruowei/Desktop/ds learning/NBER data/gouldallr.csv")

# examine data structure
gould.head()
print(gould.info())

# examine categorical variables

# Name
gould['NAME'].value_counts()   
len(gould.NAME.unique()) 
gould['NAME'].isnull().sum() 
# Rank
gould['RANK'].value_counts()
len(gould.RANK.unique())  
gould['RANK'].isnull().sum()
# American
gould['AMERICAN'].value_counts()  
gould['AMERICAN'].isnull().sum() 
# Ancestry
gould['ANCESTRY'].value_counts()  
len(gould.ANCESTRY.unique())
gould['ANCESTRY'].isnull().sum() 
# state/country of birth 
gould['BRN_STAT'].value_counts()  
len(gould.BRN_STAT.unique())
gould['BRN_STAT'].isnull().sum() 
# County of birth 
gould['BRN_CNTY'].value_counts()  
len(gould.BRN_CNTY.unique())
gould['BRN_CNTY'].isnull().sum() 
# town of birth 
gould['BRN_TOWN'].value_counts()  
len(gould.BRN_TOWN.unique())
gould['BRN_TOWN'].isnull().sum() 
#.....for all categorical variables
# Bulk check example: Education-related columns
edu_cols = [col for col in gould.columns if 'EDC' in col]
print(edu_cols)
gould[edu_cols].isnull().sum() 
# another exapmle: comments columns
comm_cols = [col for col in gould.columns if 'COM' in col]
print(comm_cols)
gould[comm_cols].isnull().sum() 

# examine numerical variables
# example: Height
gould['HEIGHT'].describe() 
gould['HEIGHT'].isnull().sum()
# ... for all numerical variables

# subset original dataset
# select interested columns
selected_columns = ['NAME','RANK','AMERICAN','ANCESTRY','BRN_STAT','BRTH_FAT','ENS_WHER','ENS_WHAT','EYE_CLR','ST_VIGOR','ATHLETIC','EXAMINER','RSTATE','MARREE','HAIRCOLR','EYEPROM','COMPLXEE','MUSCLEE','TEETHEE','EXAMPLAC','HEIGHT','HYT_NCK','HYT_PEM','BRD_NCK','BRD_PLV','CIR_WST','CIR_HIP','LGH_ARM','CAP_CHES','WEIGHT','DYNAMOME','AGE','SHOULDER'] 
gould_s = gould[selected_columns]
# save subsetted dataset
gould_s.to_csv("/Users/ruowei/Desktop/ds learning/NBER data/gould_s.csv")

# rename columns to be more readable
gould_s.rename(columns={'BRN_STAT': 'St_Ctry_Birth', 'BRTH_FAT': 'Father_birthplace', 'ENS_WHER': 'Enlist_location', 'ENS_WHAT': 'Enlist_term', 'ATHLETIC': 'Athletic_Recreation', 'RSTATE': 'Regi_state', 'MARREE': 'Marital_status', 'EYEPROM': 'Eyes_prom', 'COMPLXEE': 'Complexion', 'MUSCLEE': 'Muscle_dev', 'TEETHEE': 'Teeth_con', 'HYT_NCK': 'Height_to_neck','HYT_PEM': 'Height_to_perinaeum','BRD_NCK': 'Neck_breadth', 'BRD_PLV':'Pelvis_breadth','CIR_WST':'Waist_circumference','CIR_HIP':'Hip_circumference','LGH_ARM':'Arm_length','CAP_CHES': 'Chest_capacity','SHOULDER': 'Shoulder_width'}, inplace=True)   
# format column names:
# Capitalize all columns:
gould_s.columns = gould_s.columns.str.capitalize()
# reorder columns to be rougly in the following groups: demographics, military information, anthropometrics, vigor, appearance, health condition.
columns_order = ['Name', 'Age', 'American', 'Ancestry', 'St_ctry_birth', 'Father_birthplace', 'Marital_status', 'Rank', 'Enlist_location', 'Enlist_term', 'Regi_state', 'Examiner', 'Examplac' ,'Height', 'Weight', 'Waist_circumference', 'Hip_circumference', 'Shoulder_width', 'Arm_length','Height_to_neck','Height_to_perinaeum', 'Neck_breadth', 'Pelvis_breadth', 'Chest_capacity', 'Dynamome', 'Eye_clr', 'Haircolr', 'Complexion', 'Muscle_dev', 'St_vigor', 'Athletic_recreation', 'Eyes_prom', 'Teeth_con']
gould_formatted = gould_s.reindex(columns=columns_order)
#save formatted dataset
gould_formatted.to_csv("/Users/ruowei/Desktop/ds learning/NBER data/gould_formatted.csv")

# basic cleaning of each variable
gould_formatted = pd.read_csv("/Users/ruowei/Desktop/ds learning/NBER data/gould_formatted.csv")

# Name
gould_formatted['Name'] = gould_formatted['Name'].replace(['NO NAME GIVEN', 'NONE GIVEN', 'NOT LEGIBLE', 'NO NAME', 'NOT GIVEN'], None) 
gould_formatted['Name'] = gould_formatted['Name'].astype('str')

# Age
gould_formatted['Age'] = gould_formatted['Age'].replace('BROWN', np.nan) 
gould_formatted['Age'] = gould_formatted['Age'].astype('float64') 

# American
gould_formatted['American'] = gould_formatted['American'].replace(['T', 'F'], ['Y', 'N']) 
gould_formatted['American'] = gould_formatted['American'].astype('category') 

# Ancestry: missing too much information, drop column
gould_formatted = gould_formatted.drop("Ancestry", axis=1) 

# birth place
gould_formatted['St_ctry_birth'] = gould_formatted['St_ctry_birth'].astype('category') 

# Father birth place
gould_formatted['Father_birthplace'] = gould_formatted['Father_birthplace'].replace(['??', '?'], None) 
gould_formatted['Father_birthplace'] = gould_formatted['Father_birthplace'].astype('category') 

# Marital status
gould_formatted['Marital_status'] = gould_formatted['Marital_status'].replace('BROWN', np.nan)
gould_formatted['Marital_status'] = gould_formatted['Marital_status'].astype('category') 

# Rank
# Renaming "private": 
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['PR','PRIV', 'P', 'PRIVTE', 'RIVATE', 'PRT', 'PRIAVTE', 'PRI', 'P.', 'PRIVAATE', 'PRIVAE', 'PRVATE', 'PRIVAT', 'PR.', 'PRIATE', 'PRIVAYE', 'PRRIV', 'PPRIVATE', 'PRIVATE.', 'PRIVATTE', 'PRVIATE', 'PVT'], 'PRIVATE')
# "coporal": 
# Find all possible combinations
list = gould_formatted[gould_formatted['Rank'].str.contains("CO") == True]
cop_list = list['Rank'].unique() 
print(cop_list) 
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['CORP', 'CORPOREAL', 'FORPORAL', \
'CORPROAL', 'COPORAL', 'CORPL', '2 CORP', 'CORPOAL', 'COPR', 'PRIVATE CORP.', 'PRIVATE CORP', \
'COPL', 'CORP.', 'CORORAL', 'CORPL.', 'COPRORAL', 'PRIV./CORPORAL', '1ST COPL' '2ND CORPORAL', \
'COPER', 'PRIV CORPORAL', 'CORPPORAL', '1 CORP', '1ST COPL', '2ND CORPORAL', 'PRIVATE CORPORA', 'COL'], 'CORPORAL')
# "sergeant":
selected_ser = gould_formatted[gould_formatted['Rank'].str.contains('SER|SAR|SG|SEAR|SEG|SRG') == True]
ser_list = selected_ser['Rank'].unique() 
print(ser_list)
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['SGT', 'SARGEANT', 'QTRMSTR SGT', '1 SERGT', 'SARGNT', \
'1 SERGEANT', '1SG', '1ST SGT', 'QURTRMSTR SGT', '1ST SARGEANT', 'SERGT', 'SGT.', 'SARGT', 'SEARGANT', \
'2 SERGT', 'SERGT.', '4 SERGT', 'SARGET', 'SERGEANT-BAND', 'SEGT', 'QMASTER SERGT', '2ND SERGT', 'SERGENT', \
'1 SEARG', 'SEREGEANT', '1ST SERGEANT', 'COM SEARGANT', 'COMMISARY SERG.', 'SRGT', 'SGNT', 'SERG', \
 '1ST SERGT', 'SERGT ORDERLY', '1ST SEARG.', 'SADDLER SGT', 'SERGEANT MAJOR', 'ORD SERGT', 'SEARGENT', \
 'ORDERLY SERGT', 'SARGEANT/MAJOR', 'COMMISSARY SERG', '3 SERGT', '1 SARGEANT', '2 DUTY SERGT', 'SARGENT', \
 '1. SERG.', 'COMMISSAR SGT.', '2SG', 'ORD. SERGT', 'SARFT', 'SERGT MAJOR', '1 SERTG', 'M SERGT', '2ND SEARG', \
 '1ST SEGT', 'SARGT MAJOR', 'SEGT 1ST', '1ST SEARG', '2 SEARG', 'PRIV./SERGEANT', 'SEARGEANT', 'MAJOR SEARGENT', \
 'Q.M. SEGT', '1ST SEARGANT', '3SERGEANT', 'ORD. SERGT.', 'COMM SERGT', 'QUARTERMAS. SER'], 'SERGEANT')
 # "captain":
selected_cap = gould_formatted[gould_formatted['Rank'].str.contains('CAPT|CPTN|CAP') == True]
cap_list = selected_cap['Rank'].unique() 
print(cap_list)
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['CAPT','CAP', 'CPTN', 'PRIVATE/CAPTAIN', 'CAPT.', 'PRIV./CAPTAIN'], 'CAPTAIN')
# "lieutenant"
selected_lt = gould_formatted[gould_formatted['Rank'].str.contains('LIEU|LT|LIE|LEI') == True]
print(selected_lt['Rank'].unique())
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['LEITUNANT', 'LT.', '2ND LIETUNANT', \
'LIEUT.', 'LT', '1ST LIEUT.', '1 LIEUT', 'LIEUT', '2ND LIEUT.', '2 LIEUT', '1ST LIEUT', 'LIEUT COL', \
'2D LIEUT', '2ND LT', '2 LT', '2 LIEUTENANT', '1 LIET', '2ND LIEUT', 'LIET.', 'LIEUTNANT', 'LIEUTANANT'], 'LIEUTENANT')
# 'handyman'
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['ARTIFICER','SUPPORT', 'BLACKSMITH', 'CARPENTER', 'TEAMSTER', \
'ARTISAN', 'WAGONER', 'STEWARD', 'SADDLER', 'COOK', 'COAL HEAVER', 'CLERK', 'QMS', 'SUTLER', \
'SADLER', 'SWEEP', 'HOSTLER', 'COLORBEARER', 'ARTIZAN?', "CAPTAIN'S COOK", 'HORSE TAMER', 'FARMER', "SUTTER'S CLERK", \
'HORSE DOCTOR', 'GROCERY MAN AT', 'ARTIFICER?', 'MILLER/PRIVATE', 'ACTING MASTER', 'WAGGONEER', \
'ORDERLY', 'PRIVATE (COOK)', 'PRIVATE-COOK', 'MESSENGER', 'MAIL AGENT', 'MILLER', 'TEACHER'], 'HANDYMAN/SUPPORT')
# 'seaman'
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['SAILOR', 'ORD SEA', 'A SEA', 'MARINE', 'ABLE SEAMAN', \
'ORD SEAMAN', 'O SEA', 'O SEAMAN'], 'SEAMAN')
# 'landsman'
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['LANDMAN', 'LAUDMAN', 'LAURMAN', 'LAUDS', \
'LAUDSMAN', 'LANDMAN?'], 'LANDSMAN')
# 'fireman'
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['2 C FIREMAN', '1 C FIREMAN', '1 FIRMAN', '2 FIREMAN', \
'2C FIREMAN'], 'FIREMAN')
# 'Musician'
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['MUSICIAN', 'DRUMMER', 'BUGLER', 'MUS', 'BAND', 'BUGLEMAN', \
'MUSIC', 'PRINCIPAL MUSIC', 'DRUM MAJOR', 'PRIVATE/DRUMMER', 'PRIVATE/BUGLER', 'LEADER OF BAND', \
'CHIEF BUGLER', 'CHIEF MUSICIAN', 'PRIV & MUSICIAN', 'PRIVATE-MUSICIA', 'BUGLAR'], 'MUSICAN/BAND')
# "doctor/hospital"
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['DOCTOR', 'SURGEON', 'ASR', 'HOSPITAL STEWAR', \
'HOSP. STEWARD', 'A.A. SURGEON', 'PHYSICIAN', 'ASSIT SURGEON', 'CO. SURGEON', 'COMMIS. SURGEON', \
'HOSPITAL ST.', 'ASST. SURGEON', 'HOSPIT. STEWART', 'ASS SURG', 'ACTING SURGEON', 'HOST. STEW.', \
'HSPTL STEWARD', 'A A SURGEON', 'HOSP STEWARD'], 'DOCTOR/HOSPITAL')
# 'clergy'
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['CHAPLAIN', 'MINISTER', 'REVEREND', \
'MINISTER IN', 'PRIEST', 'CLERGYMAN'], 'CLERGY')
# 'other ranked officers'
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['MAJOR', 'COLONEL', 'CHIEF OFFICER', \
'GENERAL', 'COM IN CHIEF', 'CHIEF', 'FIBE MAJOR', 'USC COM', 'COM.'], 'OTHER_RANKS')
# 'Missing'
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['NO DATA', 'ILLEGIBLE', 'NO RANK GIVEN', \
'I JUST WENT ON', '????', 'NO RANK INFO', 'S??', 'US SC', 'PA', \
'THE NEXT ONE', '33 NY', 'N', '1', '18 KY'], None)
# 'all others'
gould_formatted['Rank'] = gould_formatted['Rank'].replace(['CITIZEN', 'BOY', 'PIONEER', 'UNASSIGNED', \
'CAFLAUI', 'CITIZEN&SUTTER?', 'SUBSTITUTE', 'RECRUIT?', 'DRAFTED', 'GUNMAN', 'LARQUIAT', 'RECRUIT'], 'OTHER')
# drop first two rows with skipped entries
gould_formatted = gould_formatted.drop([0, 1]) 
gould_formatted['Rank'] = gould_formatted['Rank'].astype('category') 

# Enlist location
gould_formatted['Enlist_location'] = gould_formatted['Enlist_location'].astype('category') 

# Enlist term
# 2 to 3 years
gould_formatted['Enlist_term'] = gould_formatted['Enlist_term'].replace(['2 YEARS', '2YRS 9MOS', \
'2 YR 3 MO', '2YRS 2MS', '2 1/2 YRS', '3M/2Y/1Y', \
'2 YRS', '2', '2YRS', \
'1YR/THEN 2', '2 YR'], '2 TO 3 YEARS')
# 1 to 2 years
gould_formatted['Enlist_term'] = gould_formatted['Enlist_term'].replace(['1 YEAR', '18 MONTHS', '19 MONTHS', \
'18 MOS', '17MOS', '1YR & 3 MO', '16MOS', '18 MO', '1 1/2 YR', \
'1 YR', '1', '1 YR/WAR' \
'1 YEAR/WAR', '1 YR/WAR', '1 YEAR/WAR', '1YERA/WAR', '1 YEARS', '1 YR./WAR', '1YR', '9MOS; 1YR', \
'9MOS/1YR', '1YR./WAR', 'I YR', '1 YR.', '1 YAR', '1YEAR', \
'1YEAR/WAR', '1 YRS', '1/ WAR', '1YR/WAR', '1 YERA', '1 YR/ WAR', '1YEAR/ WAR', '1/WAR', '1 YEAR\WAR', \
'1 YR./ WAR', '1Y R', '1 1/2 YEAR'], '1 TO 2 YEARS')
# 5 or more years
gould_formatted['Enlist_term'] = gould_formatted['Enlist_term'].replace(['5 YEARS', '6 YEARS', '5 YRS', '5', '5 YEAR', \
'6', '6 YRS', '6 YEAR', '5 1/2 YRS', '5 YRS 6 MO', '5 YR 4 MO', '5 YR 6 MO', '8 YRS', '5 YR 3 MO', '28 YRS', '5 YRS 3 MO', \
'5 1/2 YR', '8', '8 YEARS', '7 YEARS', '33', 'LIFE', '5 YR 10 MO', '9 YEARS', '5YRS 4MOS', \
'15', '5 YR 9 MO', '30', '32', '5 YRS 7 MO', '15 YEARS', '20 YRS', '11 YRS', 'INDFEINITE', 'INDEFINITE', \
'5 3/4 YR', '1O YRS', '13', '18 YEARS', '5 YRS 4 MO', '10 YEARS', '10 YRS', '5 + YEARS', '5 YR 8 MO'], '5 OR MORE YEARS')
# 4 to 5 years
gould_formatted['Enlist_term'] = gould_formatted['Enlist_term'].replace(['4 YEARS', '4 YRS', '4', '4 YR', '4 YR 6 MO', '4 YRS 3 MO', \
'4 1/2 YRS', '4 YR 2 MO', '4 1/2 YR'], '4 TO 5 YEARS')
# 3 to 4 years
gould_formatted['Enlist_term'] = gould_formatted['Enlist_term'].replace(['3 YEARS', '3 YRS', '3', '3 YR', '3 YEAR', '3 YS', \
'3YRS/3YRS', '3YRS', '3YEARS', '9MOS/3YRS', '3 YERS', '3 YEASR', '3  YRS', '3 YSR', '3 YEARSS', \
'3 EYARS', '3 YR/WAR', '3/WAR', '3YR/WAR', '3 YREAS', '3 UEARS', '2YRS/3YRS', '3 YEAERS', '3 RYS', \
'3 YR.', '2Y/3Y', '1YR/3YRS', '1 YR/3 YRS', '3 YEARD', 'WAR-3 YR.', '3  YEARS', '3YRS/1YR', \
'3 YRS.', '3 YAERS', '8MO/3YR', '3 YEAT', '3YEAR/WAR', "3 YEARS'", '3 YEATS', "3YRS; 1YR", '3 YEAS', \
'3 YEARWS', '3 Y EARS', '9MOS/3 YRS', '3MOS/3YRS', '3 YEARAS', '3YRS; 1 YR', '3 YERAS', '9 MOS/3 YR', \
'3YRS 3MOS', '3YRS 9MOS', '3 YRS 9 MO', '10MOS/3YRS', \
'3 1/2 YRS.', '3YRS 3 MOS', '3 1/2 YRS', '3YRS 8MOS', '3 YRS 3MOS', '3 YR 9 MO'], '3 TO 4 YEARS')
# less than 1 year
gould_formatted['Enlist_term'] = gould_formatted['Enlist_term'].replace(['9 MOS', '3 MONTHS', '3 MOS', '6 MONTHS', \
'9 MONTHS', '6 MO/WAR', '6 WEEKS', '7 MONTHS', '9 MO./WAR', '6MO./WAR', '9 MO', '10 MOS', '9 MOS.', '7 MO/WAR', \
'100 DAYS'], 'LESS THAN 1 YEAR')
# missing
gould_formatted['Enlist_term'] = gould_formatted['Enlist_term'].replace(['NO DATA', 'INDEPENDAN', '?', 'NO TIME', \
'E', 'WI', 'Q YR', 'BUFFALO', 'YRS', 'ILLEGIBLE', 'NO INFO', 'NEWBURN', 'WARREN', 'A', 'BROWN'], None)
# During war
gould_formatted['Enlist_term'] = gould_formatted['Enlist_term'].replace(['WAR', 'DURING WAR', 'THE WAR'], 'WAR/NO SPECIFIED TERM')
# Other unspecified
gould_formatted['Enlist_term'] = gould_formatted['Enlist_term'].replace(['REJECTED', 'TILL MARCH', '1861'], \
'OTHER UNSPECIFIED')
gould_formatted['Enlist_term'] = gould_formatted['Enlist_term'].astype('category') 

# Registration state:
gould['Regi_state'] = gould['Regi_state'].astype('category') 

# Examiner:
gould['Examiner'] = gould['Examiner'].replace(['11','POOR'], np.nan) 
gould['Examiner'] = gould['Examiner'].astype('category') 

# Examination place:
gould['Examplac'] = gould['Examplac'].astype('category') 

# Eye color:
# Blue
gould['Eye_clr'] = gould['Eye_clr'].replace(['LIGHT BLUE', 'LT BLUE', 'DARK BLUE', 'DK BLUE', \
'D BLUE', 'BL', 'LT. BLUE', 'D.BLUE', 'DK.BLUE', 'BLUE DK', 'BLUE LT', 'PALE BLUE', 'BLLUE', 'BLUE-GRAY', \
'NLUE', 'BLUE/GREY', 'BLU', 'BLUE/GRAY', 'BLU3', 'LBLUE', 'LIGH BLUE', 'L BLUE', 'LIGHTBLUE', \
'BLUE&GREY', 'LT.BLUE', 'BLUISHGREY', 'BLUEN', 'BLUR', 'BLUE/BROWN', 'BLOUE', 'LTBLUE', 'LT B', 'DK. BLUE', \
'LT PALE BL'], 'BLUE')
# Brown
gould['Eye_clr'] = gould['Eye_clr'].replace(['DK BROWN', 'D BROWN', 'BR', 'DARK BROWN', \
'DK BR', 'LT BROWN', 'DBROWN', 'DARKBROWN', 'BROWN DK', 'LIGHT BROW', 'LT BR', 'LIGHTBROWN', 'LT. BROWN', 'DK.BROWN', \
'DK. BROWN', 'LTBROWN', 'DRK BROWN', 'D.BROWN', 'D. BROWN', 'BRWON', 'NR', 'DRKBROWN', 'LT.BROWN', \
'DROWN', 'DKD BROWN', 'DAKR BROWN', 'BROWNA', 'LBROWN', 'DKB ROWN', 'DKBROWN', 'DARKBRIWN', 'DK BAROWN', \
'DJ BR', 'LI BROWN', 'BROAN', 'D BR', 'D BROWBN', 'LR BR', 'DRAK BROWN', 'ABROWN', 'BRORWN'], 'BROWN')
# Black
gould['Eye_clr'] = gould['Eye_clr'].replace(['BLK', 'BLAK', 'BALCK', 'LT.BLACK', 'NEAR BLACK'], 'BLACK')
# Hazel
gould['Eye_clr'] = gould['Eye_clr'].replace(['HAZLE', 'DK HAZEL', 'DARK HAZEL', 'LT HAZEL', \
'DK HAZLE', 'DK.HAZEL', 'DK. HAZEL', 'LIGHT HAZE', 'HAZEL DK', 'HAVEL', 'D.HAZEL', \
'LT.HAZEL', 'HZEL', 'HHAZEL'], 'HAZEL')
# Gray
gould['Eye_clr'] = gould['Eye_clr'].replace(['GREY', 'GR', 'DARK GREY', 'DK GRAY', 'DK GREY', \
'LIGHT GREY', 'LT GRAY', 'GREY-BLUE', 'DK. GRAY', 'GREY DK', 'LY GRAY', 'BREY', \
'GREY/HAZEL', 'GLAY', 'GRAR', '1 GRAY', 'LT GREY', 'LIGHTGRAY', 'LIGHT GRAY'], 'GRAY')
# Green
gould['Eye_clr'] = gould['Eye_clr'].replace(['LT GREEN', 'GREENHAZEL'], 'GREEN')
# Yellow
gould['Eye_clr'] = gould['Eye_clr'].replace('YELLOWISH', 'YELLOW')
# Other
gould['Eye_clr'] = gould['Eye_clr'].replace(['DARKMAN', 'LT', 'LIGHT'], 'OTHER')
# missinsg
gould['Eye_clr'] = gould['Eye_clr'].replace(['WAVY', 'AVERAGE', 'STRAIGHT', "DON'T KNOW", 'GOOD'], np.nan)
gould['Eye_clr'] = gould['Eye_clr'].astype('category') 

# Hair color
# Brown
gould['Haircolr'] = gould['Haircolr'].replace(['DK BROWN', 'BR', 'DARK BROWN', 'LT BROWN', \
'LIGHT BROWN', 'DK BR', 'LT BR', 'DK.BROWN', 'LT. BROWN', 'BROWN DK', 'LT.BROWN', \
'DK. BROWN', 'D BROWN', 'BROWN LT', 'LIGHT BROW', 'BROWN/GREY', 'L.BROWN', 'D.BROWN', \
'BROWN/GRAY', 'BR & GRAY', 'BRONW', 'BRWON', 'LR BR', 'BROWN DARK', 'L BROWN', \
'LIGHT BR', 'BORWN', 'D. BROWN', 'DRK BROWN', 'DARKBROWN', 'REDDISH BROWN', 'BRWN/GREY', \
'BOWN', 'BROWN LIGHT', 'BROWN&GREY', 'DK  BROWN', 'BROW', 'DRKBROWN', 'LIGHTBROWN', \
'BK BROWN', 'DARK BR', 'BRWN', 'BROWNMEDIU', 'BTOWN', 'BR & GR', 'BROWNA', 'LT/BROWN', \
'DK BRR', 'BROWNAVERAGE', 'DK BR/GREY', 'DDK BROWN', 'BR/GREY', 'L.BRWN/GRE', 'BROWN K', \
'LK.BROWN', 'BROWN D', 'BRON', 'DK BR;GREY', 'BROWN IRON', 'BEOWN', 'DJ BR', 'BROWON', \
'LTBROWN', 'K BROWN', 'DJ BRIWB', 'LT BROWNSC', 'BROWB', 'BRWON DK', 'SOFT BR', 'BROWN&GRAY', \
'BROWN/BALD', 'BROWNGE', 'DK. BRIWN', 'DARKK BROWN', 'LT  BROWN', 'BROEN', 'BROWN LT.', \
'LIGHT BRO', 'LT.BRPWN', 'OIGHT BROWN', 'LT. BROEN', 'BROWN & GR', 'BROWN-GREY', "BROWN'", 'DRAK BROWN', \
'BR & GREY', 'SANDY', 'LT SANDY', 'SANDY BROW', 'SANY', 'LIGHT SANDY', 'SANDT', \
'SAVOY', 'CHESTNUT'], 'BROWN')
# Black
gould['Haircolr'] = gould['Haircolr'].replace(['BLK', 'BLACK/GREY', 'BALCK', 'BLAK', 'BLACK/GRAY', \
'BLK/GRAY', 'BLAKC', 'LACK', 'DK BLACK', 'BLACKMEDIU', 'BLAC', 'BLK & GRAY', 'BLACK-GRAY', 'BLCK', \
'BLACKA', 'BK', 'BLACK&GREY', 'BLLACK'], 'BLACK')
# Red
gould['Haircolr'] = gould['Haircolr'].replace(['AUBURN', 'LT AUBURN', 'DK AUBURN', 'AUBURN DK', \
'LIGHT AUBURN', 'AUBUSRN', 'AUBURN/GRY', 'DK. AUBURN', 'L.AUBURN', 'DARK AUBURN', 'LIGHT RED', \
'AUBURN AVE', 'AUB/GREY'], 'RED')
# Gray
gould['Haircolr'] = gould['Haircolr'].replace(['GREY', 'IRON GRAY', 'GRAY/BROWN', 'GRAY/BLACK', \
'IRON GREY', 'GRY/BLACK', 'GREY/BLACK', 'MIX GREY', 'MIX GRAY', 'GREY/BROWN', 'GREY-BROWN', \
'LIGHTG', 'LT GREY', 'GREY(BLK)', 'GRY/BROWN', 'STOVE GRAY'], 'GRAY')
# Other
gould['Haircolr'] = gould['Haircolr'].replace(['LIGHT', 'DARK', 'LT', 'WHITE', 'DK', 'FLAXEN', \
'AMBER', 'BLUE', 'HAZEL', 'VERY LIGHT', 'LIGHT MED', 'MEDIUM', 'TAN', 'NTOEN', 'YELLOW', 'SILVER', \
'VERY DARK', 'MIXED LIGH'], 'OTHER')
# missinsg
gould['Haircolr'] = gould['Haircolr'].replace(['ILLEGIBLE', 'ST', 'PR', "OFF", 'MACHINIST', \
'FARMER', 'SEAMAN', 'SAILOR', 'RUST', 'LARGE'], np.nan)

# Complexion
# Fair
gould['Complexion'] = gould['Complexion'].replace(['FA', 'FARI', 'PALE', 'FAI', 'NFAIR', \
'1FAIR', 'FAIR1', 'FAIT', 'FAIRY', 'FAIRLY WHI', 'FAAIR', 'FAIRM', 'WH', 'FIR', 'WHITE'], 'FAIR')
# Dark
gould['Complexion'] = gould['Complexion'].replace(['DK', 'ARK', 'D', 'DK COPPER', 'DARK RUDDY', \
'DADRK', 'DK BROWN', 'DARKBROWN', 'DARKK', 'DARK OLIVE', 'MULATTO', 'DARK BROWN', 'DARK 80.', \
'D. BROWN', 'DAARK', 'VERY DARK', 'TANNED', 'DA', 'TAN', 'D BROWN', 'DEEP BR', 'SUN TANNED', \
'DK.BROWN', 'MU'], 'DARK')
# Red
gould['Complexion'] = gould['Complexion'].replace(['RUDDY', 'FLORID', 'FLORID?', 'RUUDY', \
'FL', 'BUDDY', 'FLOIRD', 'RUDDY/FAIR', 'FUDDY', 'FLORIS', 'YRUDDY', 'BROWN(RED)', 'RUBBY'], 'RED')
# Black
gould['Complexion'] = gould['Complexion'].replace(['BLK', 'BL', 'BLAK', 'VERY BLACK', \
'NEAR BLACK', 'B', 'GLACK'], 'BLACK')
# Light
gould['Complexion'] = gould['Complexion'].replace(['LT', 'LI', 'LT/FAIR', 'LT BR', \
'LT YELLOW', 'LT BROWN', 'LIGHT/FAIR', 'LIGFHT', 'LIGHTYELLO', 'LGHTBROWN', \
'L YELLOW', 'LT BLUE', 'LIGHT FAIR', 'L SANDY', 'LBROWN'], 'LIGHT')
# Medium
gould['Complexion'] = gould['Complexion'].replace(['MED', 'ME', 'MEDIUDM', 'MEIUM', \
'MED.'], 'MEDIUM')
# Robust
gould['Complexion'] = gould['Complexion'].replace(['ROB', 'ROBUSR', 'ROBUSUT'], 'ROBUST')
# Brown
gould['Complexion'] = gould['Complexion'].replace(['BR', 'SANDY'], 'BROWN')
# Yellow
gould['Complexion'] = gould['Complexion'].replace(['YE', 'SALLOW', 'TALLOW', 'TALLON', 'FALLOW', \
'SALLON', 'TAWNY', 'YELLLOW'], 'YELLOW')
# Other
gould['Complexion'] = gould['Complexion'].replace(['RU', 'RE', 'OLIVE', 'SUNDDRY', 'BRONZED', \
'OLIVE BR', 'FINE', 'GREY'], 'OTHER')
# Missing
gould['Complexion'] = gould['Complexion'].replace(['NO DATA', 'GOOD', 'STRAIGHT', 'ST', \
'NOT LEGIBL', '0', 'BRANDY', 'VE', 'SA', 'BT', 'WIDOWER', 'K', '??', '?', 'LARGE'], np.nan)

# Muscle development
# Moderate
gould['Muscle_dev'] = gould['Muscle_dev'].replace(['MODERTE', 'MEDIUM', 'MED', 'MOD', \
'MODERAT', 'AVERAGE', 'MODERTAE', 'MODERAE', 'NODERATE', 'MODRATE', 'MODEREATE', 'MODEERATE', \
'MODERWATE', 'MODREATE', 'MMODERATE', 'MODERASTE', 'MEDERATE', 'MIDDLING', 'FAIR'], 'MODERATE')
# Large
gould['Muscle_dev'] = gould['Muscle_dev'].replace(['VERY LARGE', 'FARGE', 'LAARGE'], 'LARGE')
# Good
gould['Muscle_dev'] = gould['Muscle_dev'].replace(['GODD', 'PRETTY GOOD', 'GGOD', \
'VERY GOOD', 'muscle'], 'GOOD')
# Small
gould['Muscle_dev'] = gould['Muscle_dev'].replace(['NOT LARGE', 'SAMLL', 'NOT VERY GOOD', \
'NOT VERY'], 'SMALL')
# Full
gould['Muscle_dev'] = gould['Muscle_dev'].replace(['VERY', 'FULUL'], 'FULL')
# Deficient
gould['Muscle_dev'] = gould['Muscle_dev'].replace(['DIFICIENT', 'SCANTY'], 'DEFICIENT')
# Missing
gould['Muscle_dev'] = gould['Muscle_dev'].replace('FLORID', np.nan)

# Vigor
gould['St_vigor'] = gould['St_vigor'].replace(['T', '13'], np.nan)

# Athletic recreation
gould['Athletic_recreation'] = gould['Athletic_recreation'].replace('BROWN', np.nan)

# Eyes prominent
gould['Eyes_prom'] = gould['Eyes_prom'].replace(['FAIR', 'F'], np.nan)

# Teeth condition

# save dataset
gould_formatted.to_csv("/Users/ruowei/Desktop/ds learning/NBER data/gould_f2.csv") 
gould.to_csv("/Users/ruowei/Desktop/ds learning/NBER data/gould_f2.csv") 

# can be used to create categorical subset: import copy cat_gould = gould.select_dtypes(include = ['object']).copy()
# examine missing values from entire dataset
print(gould.isnull().values.sum())
perc_missing = 3360274/(229*20406)
perc_missing
# examine missingness by column
print(gould.isnull().sum())
# drop columns with more than 80% missingness
thresh = len(gould)*.2
gould.dropna(thresh = thresh, axis = 1, inplace = True)
# Look at Rank distributions
import seaborn as sns 
rank_dist = gould['RANK'].value_counts() 
sns.set(style="darkgrid") 
sns.barplot(rank_dist.index, rank_dist.values, alpha=0.9) 
plt.title('Frequency Distribution of Military Rank') 
plt.ylabel('Number of Occurrences', fontsize=12) 
plt.xlabel('Rank', fontsize=12) 
plt.show()  
    
    
%save -r gouldanalysis 1-99999
